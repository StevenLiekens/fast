// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fast_api.EntityFramework;

namespace fast_api.Migrations
{
    [DbContext(typeof(FastContext))]
    [Migration("20200708204147_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("fast_api.EntityFramework.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Buy")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sell")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.CategoryItem", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CategoryItems");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.Container", b =>
                {
                    b.Property<int>("ContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Buy")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sell")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ContainerId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerCategory", b =>
                {
                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("DropRate")
                        .HasColumnType("double");

                    b.HasKey("ContainerId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ContainerCategories");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerContainer", b =>
                {
                    b.Property<int>("ParentContainerId")
                        .HasColumnType("int");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<double>("DropRate")
                        .HasColumnType("double");

                    b.HasKey("ParentContainerId", "ContainerId");

                    b.HasIndex("ContainerId");

                    b.ToTable("ContainerContainers");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerCurrency", b =>
                {
                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<double>("DropRate")
                        .HasColumnType("double");

                    b.HasKey("ContainerId", "Currency");

                    b.ToTable("ContainerCurrencies");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerItem", b =>
                {
                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<double>("DropRate")
                        .HasColumnType("double");

                    b.HasKey("ContainerId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ContainerItems");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerSelectionContainer", b =>
                {
                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<int>("SelectionContainerId")
                        .HasColumnType("int");

                    b.Property<double>("DropRate")
                        .HasColumnType("double");

                    b.HasKey("ContainerId", "SelectionContainerId");

                    b.HasIndex("SelectionContainerId");

                    b.ToTable("ContainerSelectionContainers");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.CurrencyTrade", b =>
                {
                    b.Property<int>("CurrencyTradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Buy")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CoinCost")
                        .HasColumnType("int");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SelectionContainerId")
                        .HasColumnType("int");

                    b.Property<int>("Sell")
                        .HasColumnType("int");

                    b.HasKey("CurrencyTradeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SelectionContainerId");

                    b.ToTable("CurrencyTrades");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.CurrencyTradeCost", b =>
                {
                    b.Property<int>("CurrencyTradeCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CurrencyTradeId")
                        .HasColumnType("int");

                    b.HasKey("CurrencyTradeCostId");

                    b.HasIndex("CurrencyTradeId");

                    b.ToTable("CurrencyTradeCosts");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Buy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sell")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainer", b =>
                {
                    b.Property<int>("SelectionContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Buy")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sell")
                        .HasColumnType("int");

                    b.HasKey("SelectionContainerId");

                    b.ToTable("SelectionContainers");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainerCategory", b =>
                {
                    b.Property<int>("SelectionContainerId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Guaranteed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SelectionContainerId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SelectionContainerCategories");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainerContainer", b =>
                {
                    b.Property<int>("SelectionContainerId")
                        .HasColumnType("int");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Guaranteed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SelectionContainerId", "ContainerId");

                    b.HasIndex("ContainerId");

                    b.ToTable("SelectionContainerContainers");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainerCurrency", b =>
                {
                    b.Property<int>("SelectionContainerId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Guaranteed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SelectionContainerId", "Currency");

                    b.ToTable("SelectionContainerCurrencies");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainerItem", b =>
                {
                    b.Property<int>("SelectionContainerId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Guaranteed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SelectionContainerId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("SelectionContainerItems");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.CategoryItem", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Category", "Category")
                        .WithMany("CategoryItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fast_api.EntityFramework.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerCategory", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fast_api.EntityFramework.Entities.Container", "Container")
                        .WithMany("ContainerCategories")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerContainer", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Container", "Container")
                        .WithMany("ContainerContainers")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fast_api.EntityFramework.Entities.Container", "ParentContainer")
                        .WithMany()
                        .HasForeignKey("ParentContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerCurrency", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Container", "Container")
                        .WithMany("ContainerCurrencies")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerItem", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Container", "Container")
                        .WithMany("ContainerItems")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fast_api.EntityFramework.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.ContainerSelectionContainer", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Container", "Container")
                        .WithMany("ContainerSelectionContainers")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fast_api.EntityFramework.Entities.SelectionContainer", "SelectionContainer")
                        .WithMany()
                        .HasForeignKey("SelectionContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.CurrencyTrade", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("fast_api.EntityFramework.Entities.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId");

                    b.HasOne("fast_api.EntityFramework.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("fast_api.EntityFramework.Entities.SelectionContainer", "SelectionContainer")
                        .WithMany()
                        .HasForeignKey("SelectionContainerId");
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.CurrencyTradeCost", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.CurrencyTrade", "CurrencyTrade")
                        .WithMany("CurrencyTradeCost")
                        .HasForeignKey("CurrencyTradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainerCategory", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fast_api.EntityFramework.Entities.SelectionContainer", "SelectionContainer")
                        .WithMany("SelectionContainerCategories")
                        .HasForeignKey("SelectionContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainerContainer", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fast_api.EntityFramework.Entities.SelectionContainer", "SelectionContainer")
                        .WithMany("SelectionContainerContainers")
                        .HasForeignKey("SelectionContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainerCurrency", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.SelectionContainer", "SelectionContainer")
                        .WithMany("SelectionContainerCurrencies")
                        .HasForeignKey("SelectionContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fast_api.EntityFramework.Entities.SelectionContainerItem", b =>
                {
                    b.HasOne("fast_api.EntityFramework.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fast_api.EntityFramework.Entities.SelectionContainer", "SelectionContainer")
                        .WithMany("SelectionContainerItems")
                        .HasForeignKey("SelectionContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
